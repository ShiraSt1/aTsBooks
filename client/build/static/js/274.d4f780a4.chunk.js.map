{"version":3,"file":"static/js/274.d4f780a4.chunk.js","mappings":"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","sources":["Components/login.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Password } from 'primereact/password'; // Correct import for Password\r\nimport { setToken, logOut } from '../redux/tokenSlice'\r\nimport '../Styles/login.css'\r\nimport { ProgressSpinner } from 'primereact/progressspinner';\r\nimport { getConfig } from '../config';\r\nimport { Toast } from 'primereact/toast';\r\n\r\nconst Login = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [error, setError] = useState('');\r\n    const [forgotPassword, setForgotPassword] = useState(false);\r\n    const [newPassword, setNewPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [successMessage, setSuccessMessage] = useState('');\r\n    const [validationError, setValidationError] = useState('');\r\n    const dispatch = useDispatch();\r\n    const { token } = useSelector((state) => state.token);\r\n    const [verificationStep, setVerificationStep] = useState(false);\r\n    const [verificationCode, setVerificationCode] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const navigate = useNavigate();\r\n    const apiUrl = getConfig().API_URL;\r\n    const toast = useRef(null);\r\n\r\n    const handlePasswordReset = async () => {\r\n        validatePassword(newPassword);\r\n        if (newPassword !== confirmPassword) {\r\n            setError('Passwords do not match.');\r\n            return;\r\n        }\r\n        try {\r\n            const res = await axios.post(`${apiUrl}api/user/reset-password-with-code`, {\r\n                email,\r\n                verificationCode,\r\n                newPassword\r\n            });\r\n            if (res && res.status === 200) {\r\n                dispatch(setToken({ token: res.data.accessToken, user: res.data.user }))\r\n                navigate('/'); // ניווט אחרי השינוי\r\n                setSuccessMessage('Password has been reset successfully. You can now log in.');\r\n                setForgotPassword(false);\r\n                setVerificationStep(false);\r\n            }\r\n        } catch (err) {\r\n            setError('Failed to reset password. Please check the verification code and try again.');\r\n        }\r\n    };\r\n\r\n    const sendVerificationCode = async () => {\r\n        try {\r\n            const res = await axios.post(`${apiUrl}api/user/send-verification-code`, { email });\r\n            if (res && res.status === 200) {\r\n                toast.current.show({ severity: 'info', detail: 'A verification code will be sent to your email.', life: 3000 });\r\n                setVerificationStep(true);\r\n                setSuccessMessage('Verification code has been sent to your email.');\r\n            }\r\n        } catch (err) {\r\n            setError('Failed to send verification code. Please try again.');\r\n        }\r\n    };\r\n\r\n    const login = async () => {\r\n        setLoading(true);\r\n        if (email && password) {\r\n            try {\r\n                const res = await axios.post(`${apiUrl}api/user/login`, { email, password });\r\n                if (res && res.status === 200) {\r\n                    dispatch(setToken({ token: res.data.accessToken, user: res.data.user }))\r\n                    navigate('/');\r\n                }\r\n            } catch (err) {\r\n                if (err.response && err.response.status === 401) {\r\n                    setError('Email does not have an acount.');\r\n                } else if (err.response && err.response.status === 402) {\r\n                    setError('Your password is not correct.');\r\n                }else if (err.response && err.response.status === 403) {\r\n                    setError('Your account has not been confirmed yet.');\r\n                } else {\r\n                    setError('An error occurred, please try again.');\r\n                }\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        } else {\r\n            setError('Please fill in both email and password.');\r\n        }\r\n    };\r\n\r\n    const validatePassword = (value) => {\r\n        if (!value) {\r\n            setValidationError('Password is required.');\r\n        } else if (value.length < 6) {\r\n            setValidationError('Password must be at least 6 characters long.');\r\n        } else if (!/[A-Z]/.test(value)) {\r\n            setValidationError('Password must contain at least one uppercase letter.');\r\n        } else if (!/[a-z]/.test(value)) {\r\n            setValidationError('Password must contain at least one lowercase letter.');\r\n        } else if (!/[0-9]/.test(value)) {\r\n            setValidationError('Password must contain at least one digit.');\r\n        } else {\r\n            setValidationError('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"login-page-container\">\r\n            <Toast ref={toast} />\r\n            {loading && (\r\n                <div className=\"loading-container\">\r\n                    <ProgressSpinner style={{ width: '30px', height: '30px' }} />\r\n                    <p>Your request is being processed...</p>\r\n                </div>\r\n            )}\r\n            <h2 className=\"login-title\">Log in to ATS-books</h2>\r\n            {!forgotPassword ? (\r\n                <>\r\n                    <div className=\"login-input-wrapper\">\r\n                        <label htmlFor=\"email\" className=\"login-label\">Email address</label>\r\n                        <InputText\r\n                            id=\"email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            type=\"text\"\r\n                            className=\"login-input\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"login-input-wrapper\">\r\n                        <label htmlFor=\"password\" className=\"login-label\">Password</label>\r\n                        <InputText\r\n                            id=\"password\"\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                            type=\"password\"\r\n                            className=\"login-input\"\r\n                        />\r\n                    </div>\r\n                    <a\r\n                        href=\"#\"\r\n                        onClick={(e) => { e.preventDefault(); setForgotPassword(true); }}\r\n                        className=\"btn-secondary forgot-password-link\"\r\n                    >\r\n                        Forgot Password?\r\n                    </a>\r\n                    <button onClick={login} className=\"login-button\">\r\n                        Login\r\n                    </button>\r\n                </>\r\n            ) : verificationStep ? (\r\n                <>\r\n                    <div className=\"login-input-wrapper\">\r\n                        <label htmlFor=\"verification-code\" className=\"login-label\">Verification Code</label>\r\n                        <InputText\r\n                            id=\"verification-code\"\r\n                            value={verificationCode}\r\n                            onChange={(e) => setVerificationCode(e.target.value)}\r\n                            type=\"text\"\r\n                            className=\"login-input\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"login-input-wrapper\">\r\n                        <label htmlFor=\"new-password\" className=\"login-label\">New Password</label>\r\n                        <Password\r\n                            inputId=\"new-password\"\r\n                            value={newPassword}\r\n                            onChange={(e) => setNewPassword(e.target.value)}\r\n                            toggleMask\r\n                            feedback={false}\r\n                            className=\"login-input\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"login-input-wrapper\">\r\n                        <label htmlFor=\"confirm-password\" className=\"login-label\">Confirm Password</label>\r\n                        <Password\r\n                            inputId=\"confirm-password\"\r\n                            value={confirmPassword}\r\n                            onChange={(e) => setConfirmPassword(e.target.value)}\r\n                            toggleMask\r\n                            feedback={false}\r\n                            className=\"login-input\"\r\n                        />\r\n                    </div>\r\n                    <button\r\n                        onClick={handlePasswordReset}\r\n                        className=\"login-button\"\r\n                    >\r\n                        Reset Password\r\n                    </button>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <div className=\"login-input-wrapper\">\r\n                        <label htmlFor=\"email\" className=\"login-label\">Email address</label>\r\n                        <InputText\r\n                            id=\"email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            type=\"text\"\r\n                            className=\"login-input\"\r\n                        />\r\n                    </div>\r\n                    <button\r\n                        onClick={sendVerificationCode}\r\n                        className=\"login-button\"\r\n                    >\r\n                        Send Verification Code\r\n                    </button>\r\n                </>\r\n            )}\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n            {successMessage && <div className=\"success-message\">{successMessage}</div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;"],"names":["Login","email","setEmail","useState","password","setPassword","error","setError","forgotPassword","setForgotPassword","newPassword","setNewPassword","confirmPassword","setConfirmPassword","successMessage","setSuccessMessage","validationError","setValidationError","dispatch","useDispatch","token","useSelector","state","verificationStep","setVerificationStep","verificationCode","setVerificationCode","loading","setLoading","navigate","useNavigate","apiUrl","getConfig","API_URL","toast","useRef","validatePassword","value","length","test","_jsxs","className","children","_jsx","Toast","ref","ProgressSpinner","style","width","height","_Fragment","htmlFor","InputText","id","onChange","e","target","type","Password","inputId","toggleMask","feedback","onClick","async","res","axios","post","concat","status","setToken","data","accessToken","user","err","current","show","severity","detail","life","href","preventDefault","response"],"sourceRoot":""}