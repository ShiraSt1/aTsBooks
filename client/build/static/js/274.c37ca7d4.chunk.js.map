{"version":3,"file":"static/js/274.c37ca7d4.chunk.js","mappings":"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","sources":["Components/login.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Password } from 'primereact/password'; // Correct import for Password\r\nimport { setToken, logOut } from '../redux/tokenSlice'\r\nimport '../Styles/login.css'\r\nimport { ProgressSpinner } from 'primereact/progressspinner';\r\n\r\nconst Login = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [error, setError] = useState('');\r\n    const [forgotPassword, setForgotPassword] = useState(false);\r\n    const [newPassword, setNewPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [successMessage, setSuccessMessage] = useState('');\r\n    const [validationError, setValidationError] = useState('');\r\n    const dispatch = useDispatch();\r\n    const { token } = useSelector((state) => state.token);\r\n    const [verificationStep, setVerificationStep] = useState(false);\r\n    const [verificationCode, setVerificationCode] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    const handlePasswordReset = async () => {\r\n        validatePassword(newPassword);\r\n        if (newPassword !== confirmPassword) {\r\n            setError('Passwords do not match.');\r\n            return;\r\n        }\r\n        try {\r\n            const res = await axios.post(`${process.env.REACT_APP_API_URL}api/user/reset-password-with-code`, {\r\n                email,\r\n                verificationCode,\r\n                newPassword\r\n            });\r\n            if (res && res.status === 200) {\r\n                dispatch(setToken({ token: res.data.accessToken, user: res.data.user }))\r\n                navigate('/'); // ניווט אחרי השינוי\r\n                setSuccessMessage('Password has been reset successfully. You can now log in.');\r\n                setForgotPassword(false);\r\n                setVerificationStep(false);\r\n            }\r\n        } catch (err) {\r\n            setError('Failed to reset password. Please check the verification code and try again.');\r\n        }\r\n    };\r\n\r\n    const sendVerificationCode = async () => {\r\n        try {\r\n            const res = await axios.post(`${process.env.REACT_APP_API_URL}api/user/send-verification-code`, { email });\r\n            if (res && res.status === 200) {\r\n                alert(\"A verification code will be sent to your email.\")\r\n                setVerificationStep(true);\r\n                setSuccessMessage('Verification code sent to your email.');\r\n            }\r\n        } catch (err) {\r\n            setError('Failed to send verification code. Please try again.');\r\n        }\r\n    };\r\n\r\n    const login = async () => {\r\n        setLoading(true);\r\n        if (email && password) {\r\n            try {\r\n                console.log(\"in function login client\");\r\n                const res = await axios.post(`${process.env.REACT_APP_API_URL}api/user/login`, { email, password });\r\n                if (res && res.status === 200) {\r\n                    console.log(\"login res\", res);\r\n                    dispatch(setToken({ token: res.data.accessToken, user: res.data.user }))\r\n                    navigate('/');\r\n                }\r\n            } catch (err) {\r\n                console.log(\"login error\", err);\r\n                if (err.response && err.response.status === 401) {\r\n                    setError('You are not connect- There is a problem with the data you entered.');\r\n                } else if (err.response && err.response.status === 403) {\r\n                    setError('Your account has not been confirmed yet.');\r\n                } else {\r\n                    setError('An error occurred, please try again.');\r\n                }\r\n            } finally {\r\n                console.log(\"finally\");\r\n                setLoading(false);\r\n            }\r\n        } else {\r\n            setError('Please fill in both email and password.');\r\n        }\r\n    };\r\n\r\n    const validatePassword = (value) => {\r\n        if (!value) {\r\n            setValidationError('Password is required.');\r\n        } else if (value.length < 6) {\r\n            setValidationError('Password must be at least 6 characters long.');\r\n        } else if (!/[A-Z]/.test(value)) {\r\n            setValidationError('Password must contain at least one uppercase letter.');\r\n        } else if (!/[a-z]/.test(value)) {\r\n            setValidationError('Password must contain at least one lowercase letter.');\r\n        } else if (!/[0-9]/.test(value)) {\r\n            setValidationError('Password must contain at least one digit.');\r\n        } else {\r\n            setValidationError('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"login-page-container\">\r\n            {loading && (\r\n                <div className=\"loading-container\">\r\n                    <ProgressSpinner style={{ width: '30px', height: '30px' }} />\r\n                    <p>Your request is being processed...</p>\r\n                </div>\r\n            )}\r\n            <h2 className=\"login-title\">Log in to ATS-books</h2>\r\n            {!forgotPassword ? (\r\n                <>\r\n                    <div className=\"login-input-wrapper\">\r\n                        <label htmlFor=\"email\" className=\"login-label\">Email address</label>\r\n                        <InputText\r\n                            id=\"email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            type=\"text\"\r\n                            className=\"login-input\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"login-input-wrapper\">\r\n                        <label htmlFor=\"password\" className=\"login-label\">Password</label>\r\n                        <InputText\r\n                            id=\"password\"\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                            type=\"password\"\r\n                            className=\"login-input\"\r\n                        />\r\n                    </div>\r\n                    <a\r\n                        href=\"#\"\r\n                        onClick={(e) => { e.preventDefault(); setForgotPassword(true); }}\r\n                        className=\"btn-secondary forgot-password-link\"\r\n                    >\r\n                        Forgot Password?\r\n                    </a>\r\n                    <button onClick={login} className=\"login-button\">\r\n                        Login\r\n                    </button>\r\n                </>\r\n            ) : verificationStep ? (\r\n                <>\r\n                    <div className=\"login-input-wrapper\">\r\n                        <label htmlFor=\"verification-code\" className=\"login-label\">Verification Code</label>\r\n                        <InputText\r\n                            id=\"verification-code\"\r\n                            value={verificationCode}\r\n                            onChange={(e) => setVerificationCode(e.target.value)}\r\n                            type=\"text\"\r\n                            className=\"login-input\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"login-input-wrapper\">\r\n                        <label htmlFor=\"new-password\" className=\"login-label\">New Password</label>\r\n                        <Password\r\n                            inputId=\"new-password\"\r\n                            value={newPassword}\r\n                            onChange={(e) => setNewPassword(e.target.value)}\r\n                            toggleMask\r\n                            className=\"login-input\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"login-input-wrapper\">\r\n                        <label htmlFor=\"confirm-password\" className=\"login-label\">Confirm Password</label>\r\n                        <Password\r\n                            inputId=\"confirm-password\"\r\n                            value={confirmPassword}\r\n                            onChange={(e) => setConfirmPassword(e.target.value)}\r\n                            toggleMask\r\n                            className=\"login-input\"\r\n                        />\r\n                    </div>\r\n                    <button\r\n                        onClick={handlePasswordReset}\r\n                        className=\"login-button\"\r\n                    >\r\n                        Reset Password\r\n                    </button>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <div className=\"login-input-wrapper\">\r\n                        <label htmlFor=\"email\" className=\"login-label\">Email address</label>\r\n                        <InputText\r\n                            id=\"email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            type=\"text\"\r\n                            className=\"login-input\"\r\n                        />\r\n                    </div>\r\n                    <button\r\n                        onClick={sendVerificationCode}\r\n                        className=\"login-button\"\r\n                    >\r\n                        Send Verification Code\r\n                    </button>\r\n                </>\r\n            )}\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n            {successMessage && <div className=\"success-message\">{successMessage}</div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;"],"names":["Login","email","setEmail","useState","password","setPassword","error","setError","forgotPassword","setForgotPassword","newPassword","setNewPassword","confirmPassword","setConfirmPassword","successMessage","setSuccessMessage","validationError","setValidationError","dispatch","useDispatch","token","useSelector","state","verificationStep","setVerificationStep","verificationCode","setVerificationCode","loading","setLoading","navigate","useNavigate","validatePassword","value","length","test","_jsxs","className","children","_jsx","ProgressSpinner","style","width","height","_Fragment","htmlFor","InputText","id","onChange","e","target","type","Password","inputId","toggleMask","onClick","async","res","axios","post","concat","process","status","setToken","data","accessToken","user","err","alert","href","preventDefault","console","log","response"],"sourceRoot":""}