{"version":3,"file":"static/js/274.89360345.chunk.js","mappings":"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","sources":["Components/login.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Password } from 'primereact/password'; // Correct import for Password\r\nimport { setToken, logOut } from '../redux/tokenSlice'\r\nimport '../Styles/login.css'\r\n\r\nconst Login = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [error, setError] = useState('');\r\n    const [forgotPassword, setForgotPassword] = useState(false); // Toggle for \"Forgot Password\"\r\n    const [newPassword, setNewPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [successMessage, setSuccessMessage] = useState('');\r\n    const [validationError, setValidationError] = useState(''); // For password validation errors\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n    const { token } = useSelector((state) => state.token);\r\n    const [verificationStep, setVerificationStep] = useState(false);\r\n    const [verificationCode, setVerificationCode] = useState('');\r\n\r\n    const handlePasswordReset = async () => {\r\n        validatePassword(newPassword);\r\n        if (newPassword !== confirmPassword) {\r\n            setError('Passwords do not match.');\r\n            return;\r\n        }\r\n        try {\r\n            const res = await axios.post(`${process.env.REACT_APP_API_URL}api/user/reset-password-with-code`, {\r\n                email,\r\n                verificationCode,\r\n                newPassword\r\n            });\r\n            if (res && res.status === 200) {\r\n                dispatch(setToken({ token: res.data.accessToken, user: res.data.user }))\r\n                navigate('../'); // ניווט אחרי השינוי\r\n                setSuccessMessage('Password has been reset successfully. You can now log in.');\r\n                setForgotPassword(false);\r\n                setVerificationStep(false);\r\n            }\r\n        } catch (err) {\r\n            setError('Failed to reset password. Please check the verification code and try again.');\r\n        }\r\n    };\r\n\r\n    const sendVerificationCode = async () => {\r\n        try {\r\n            const res = await axios.post(`${process.env.REACT_APP_API_URL}api/user/send-verification-code`, { email });\r\n            if (res && res.status === 200) {\r\n                alert(\"A verification code will be sent to your email.\")\r\n                setVerificationStep(true);\r\n                setSuccessMessage('Verification code sent to your email.');\r\n            }\r\n        } catch (err) {\r\n            setError('Failed to send verification code. Please try again.');\r\n        }\r\n    };\r\n\r\n    const login = async () => {\r\n        if (email && password) {\r\n            try {\r\n                const res = await axios.post(`${process.env.REACT_APP_API_URL}api/user/login`, { email, password });\r\n                if (res && res.status === 200) {\r\n                    dispatch(setToken({ token: res.data.accessToken, user: res.data.user }))\r\n                    navigate('../'); // ניווט אחרי השינוי\r\n                }\r\n            } catch (err) {\r\n                if (err.response && err.response.status === 401) {\r\n                    setError('You are not connect- There is a problem with the data you entered.');\r\n                } else if (err.response && err.response.status === 403) {\r\n                    setError('Your account has not been confirmed yet.');\r\n                } else {\r\n                    setError('An error occurred, please try again.');\r\n                }\r\n            }\r\n        } else {\r\n            setError('Please fill in both email and password.');\r\n        }\r\n    };\r\n\r\n    const validatePassword = (value) => {\r\n        if (!value) {\r\n            setValidationError('Password is required.');\r\n        } else if (value.length < 6) {\r\n            setValidationError('Password must be at least 6 characters long.');\r\n        } else if (!/[A-Z]/.test(value)) {\r\n            setValidationError('Password must contain at least one uppercase letter.');\r\n        } else if (!/[a-z]/.test(value)) {\r\n            setValidationError('Password must contain at least one lowercase letter.');\r\n        } else if (!/[0-9]/.test(value)) {\r\n            setValidationError('Password must contain at least one digit.');\r\n        } else {\r\n            setValidationError(''); // Clear validation error\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"login-page-container\">\r\n            <h2 className=\"login-title\">Sign in to ATS-books</h2>\r\n            {!forgotPassword ? (\r\n                <>\r\n                    <div className=\"login-input-wrapper\">\r\n                        <label htmlFor=\"email\" className=\"login-label\">Email address</label>\r\n                        <InputText\r\n                            id=\"email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            type=\"text\"\r\n                            className=\"login-input\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"login-input-wrapper\">\r\n                        <label htmlFor=\"password\" className=\"login-label\">Password</label>\r\n                        <InputText\r\n                            id=\"password\"\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                            type=\"password\"\r\n                            className=\"login-input\"\r\n                        />\r\n                    </div>\r\n                    <a\r\n                        href=\"#\"\r\n                        onClick={(e) => { e.preventDefault(); setForgotPassword(true); }}\r\n                        className=\"btn-secondary forgot-password-link\"\r\n                    >\r\n                        Forgot Password?\r\n                    </a>\r\n                    <button onClick={login} className=\"login-button\">\r\n                        Login\r\n                    </button>\r\n                </>\r\n            ) : verificationStep ? (\r\n                <>\r\n                    <div className=\"login-input-wrapper\">\r\n                        <label htmlFor=\"verification-code\" className=\"login-label\">Verification Code</label>\r\n                        <InputText\r\n                            id=\"verification-code\"\r\n                            value={verificationCode}\r\n                            onChange={(e) => setVerificationCode(e.target.value)}\r\n                            type=\"text\"\r\n                            className=\"login-input\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"login-input-wrapper\">\r\n                        <label htmlFor=\"new-password\" className=\"login-label\">New Password</label>\r\n                        <Password\r\n                            inputId=\"new-password\"\r\n                            value={newPassword}\r\n                            onChange={(e) => setNewPassword(e.target.value)}\r\n                            toggleMask\r\n                            className=\"login-input\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"login-input-wrapper\">\r\n                        <label htmlFor=\"confirm-password\" className=\"login-label\">Confirm Password</label>\r\n                        <Password\r\n                            inputId=\"confirm-password\"\r\n                            value={confirmPassword}\r\n                            onChange={(e) => setConfirmPassword(e.target.value)}\r\n                            toggleMask\r\n                            className=\"login-input\"\r\n                        />\r\n                    </div>\r\n                    <button\r\n                        onClick={handlePasswordReset}\r\n                        className=\"login-button\"\r\n                    >\r\n                        Reset Password\r\n                    </button>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <div className=\"login-input-wrapper\">\r\n                        <label htmlFor=\"email\" className=\"login-label\">Email address</label>\r\n                        <InputText\r\n                            id=\"email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            type=\"text\"\r\n                            className=\"login-input\"\r\n                        />\r\n                    </div>\r\n                    <button\r\n                        onClick={sendVerificationCode}\r\n                        className=\"login-button\"\r\n                    >\r\n                        Send Verification Code\r\n                    </button>\r\n                </>\r\n            )}\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n            {successMessage && <div className=\"success-message\">{successMessage}</div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;"],"names":["Login","email","setEmail","useState","password","setPassword","error","setError","forgotPassword","setForgotPassword","newPassword","setNewPassword","confirmPassword","setConfirmPassword","successMessage","setSuccessMessage","validationError","setValidationError","navigate","useNavigate","dispatch","useDispatch","token","useSelector","state","verificationStep","setVerificationStep","verificationCode","setVerificationCode","validatePassword","value","length","test","_jsxs","className","children","_jsx","_Fragment","htmlFor","InputText","id","onChange","e","target","type","Password","inputId","toggleMask","onClick","async","res","axios","post","concat","process","status","setToken","data","accessToken","user","err","alert","href","preventDefault","response"],"sourceRoot":""}