{"version":3,"file":"static/js/892.724501d3.chunk.js","mappings":"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","sources":["Components/Register.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Password } from 'primereact/password';\r\nimport '../Styles/register.css'\r\nimport { ProgressSpinner } from 'primereact/progressspinner';\r\n\r\nconst Register = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [phone, setPhone] = useState('');\r\n    const [name, setName] = useState('');\r\n    const navigate = useNavigate();\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const [errors, setErrors] = useState({\r\n        email: \"\",\r\n        name: \"\",\r\n        password: \"\",\r\n        phone: \"\",\r\n    });\r\n\r\n    const createUser = async (name, email, phone, password) => {\r\n        setLoading(true);\r\n        const newUser = { name, email, phone, password };\r\n        try {\r\n            const res = await axios.post(`${process.env.REACT_APP_API_URL}api/user/register`, newUser);\r\n\r\n            if (res.status === 409) {\r\n                alert(\"email exits\")\r\n            }\r\n\r\n            else if (res.status === 200 || res.status === 201) {\r\n                navigate('/login')\r\n            }\r\n        } catch (e) {\r\n            alert(\"An error occurred while creating the user. Please try again later. Eror:\", e);\r\n            console.error(e);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        validateEmail(email); //****\r\n        validateName(name); //****\r\n        validatePassword(password); //****\r\n    }, [email, name, password]);\r\n\r\n    const validateEmail = (value) => {\r\n        setEmail(value);\r\n        if (!value) {\r\n            setErrors((prev) => ({ ...prev, email: \"This field is required\" }));\r\n        } else if (!/^\\S+@\\S+\\.\\S+$/.test(value)) {\r\n            setErrors((prev) => ({ ...prev, email: \"Enter a valid email address\" }));\r\n        } else {\r\n            setErrors((prev) => ({ ...prev, email: \"\" }));\r\n        }\r\n    };\r\n\r\n    const validateName = (value) => {\r\n        setName(value);\r\n        if (!value) {\r\n            setErrors((prev) => ({ ...prev, name: \"This field is required\" }));\r\n        } else if (value.length < 4) {\r\n            setErrors((prev) => ({ ...prev, name: \"At least 4 characters required\" }));\r\n        } else {\r\n            setErrors((prev) => ({ ...prev, name: \"\" }));\r\n        }\r\n    };\r\n\r\n    const validatePassword = (value) => {\r\n        setPassword(value);\r\n        if (!value) {\r\n            setErrors((prev) => ({ ...prev, password: \"This field is required\" }));\r\n        } else if (value.length < 6) {\r\n            setErrors((prev) => ({ ...prev, password: \"Minimum 6 characters required\" }));\r\n        } else {\r\n            setErrors((prev) => ({ ...prev, password: \"\" }));\r\n        }\r\n    };\r\n\r\n    const validatePhone = (value) => {\r\n        if (!/^\\d*$/.test(value)) {\r\n            setErrors((prev) => ({ ...prev, phone: \"The phone number can only contain digits.\" }));\r\n        } else if (value.length > 10) {\r\n            setErrors((prev) => ({ ...prev, phone: \"The phone number can contain up to 10 digits only.\" }));\r\n        } else {\r\n            setErrors((prev) => ({ ...prev, phone: \"\" }));\r\n        }\r\n        setPhone(value);\r\n    };\r\n\r\n    const isFormValid = Object.values(errors).every((error) => error === \"\") &&\r\n        email && name && password;\r\n\r\n    return (\r\n        <div className=\"register-page-container\">\r\n            <div className=\"register-form-container\">\r\n                {loading && (\r\n                    <div className=\"loading-container\">\r\n                        <ProgressSpinner style={{ width: '30px', height: '30px' }}/>\r\n                        <p>Your request is being processed...</p>\r\n                    </div>\r\n                )}\r\n                <h2 className=\"register-title\">Create an Account</h2>\r\n                <form className=\"register-form\">\r\n                    <div className=\"register-input-wrapper\">\r\n                        <label className=\"register-label\">Full Name</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={name}\r\n                            onChange={(e) => validateName(e.target.value)}\r\n                            className=\"register-input\"\r\n                            placeholder=\"Enter your full name\"\r\n                        />\r\n                        {errors.name && <small className=\"register-error\">{errors.name}</small>}\r\n                    </div>\r\n\r\n                    <div className=\"register-input-wrapper\">\r\n                        <label className=\"register-label\">Email</label>\r\n                        <input\r\n                            type=\"email\"\r\n                            value={email}\r\n                            onChange={(e) => validateEmail(e.target.value)}\r\n                            className=\"register-input\"\r\n                            placeholder=\"Enter your email address\"\r\n                        />\r\n                        {errors.email && <small className=\"register-error\">{errors.email}</small>}\r\n                    </div>\r\n\r\n                    <div className=\"register-input-wrapper\">\r\n                        <label className=\"register-label\">Password</label>\r\n                        <Password\r\n                            value={password}\r\n                            inputClassName=\"register-input\"\r\n                            onChange={(e) => validatePassword(e.target.value)}\r\n                            placeholder=\"Enter your password\"\r\n                            toggleMask\r\n                            feedback={false}\r\n                        />\r\n                        {errors.password && <small className=\"register-error\">{errors.password}</small>}\r\n                    </div>\r\n\r\n                    <div className=\"register-input-wrapper\">\r\n                        <label className=\"register-label\">Phone Number</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={phone}\r\n                            onChange={(e) => validatePhone(e.target.value)}\r\n                            className=\"register-input\"\r\n                            placeholder=\"Enter your phone number\"\r\n                        />\r\n                        {errors.phone && <small className=\"register-error\">{errors.phone}</small>}\r\n                    </div>\r\n                    <small>*Your request to join will be sent to the site administrator. You’ll receive an email once it’s approved.</small>\r\n                    <button\r\n                        type=\"button\"\r\n                        onClick={() => createUser(name, email, phone, password)}\r\n                        className=\"register-button\"\r\n                        disabled={!isFormValid}>\r\n                        Register\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Register;"],"names":["Register","email","setEmail","useState","password","setPassword","phone","setPhone","name","setName","navigate","useNavigate","loading","setLoading","errors","setErrors","useEffect","validateEmail","validateName","validatePassword","value","test","prev","_objectSpread","length","isFormValid","Object","values","every","error","_jsx","className","children","_jsxs","ProgressSpinner","style","width","height","type","onChange","e","target","placeholder","Password","inputClassName","toggleMask","feedback","validatePhone","onClick","async","newUser","res","axios","post","concat","process","status","alert","console","createUser","disabled"],"sourceRoot":""}